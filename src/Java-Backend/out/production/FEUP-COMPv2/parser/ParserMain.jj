/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. ParserMain.jj */
/*@egen*/options
{
  LOOKAHEAD=1;
  STATIC=false;
}

PARSER_BEGIN(GrammarParser)
package parser;


import utils.Utils;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.IOException;



public class GrammarParser/*@bgen(jjtree)*/implements GrammarParserTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected JJTGrammarParserState jjtree = new JJTGrammarParserState();

/*@egen*/
  public static void main(String args[]) throws ParseException {
    //read regex
    try {

    BufferedReader bufferRead = new BufferedReader(new InputStreamReader(System.in));
    String regex = bufferRead.readLine();

    Utils.initDfa(regex);
    }catch (IOException e) {
      e.printStackTrace();
    }

  }

}

PARSER_END(GrammarParser)


SKIP :
{
  " " | "\r" | "\t"
}

TOKEN: {
  <INTERVAL: ( <INTEGER> ("," (<INTEGER>)? )? )> |
  <OPERATOR: (["*", "+", "?"])> |
  <INTEGER: (["0" - "9"])+ > |
  <LF: "\n"> |
  <IDENTIFIER: (["A" - "Z"]) (["a" - "z", "0" - "9"])* > |
  <DOT: ".">
}

SimpleNode Start(): {/*@bgen(jjtree) Start */
  SimpleNode jjtn000 = new SimpleNode(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Start */
  try {
/*@egen*/
  NFASet() <LF>/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                }
/*@egen*/ {return jjtn000;}/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void NFASet(): {/*@bgen(jjtree) NFASet */
  SimpleNode jjtn000 = new SimpleNode(JJTNFASET);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) NFASet */
  try {
/*@egen*/
  ExpressionSet() ("|" ExpressionSet())*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void ExpressionSet(): {/*@bgen(jjtree) ExpressionSet */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPRESSIONSET);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ExpressionSet */
  try {
/*@egen*/
  (Expression())+/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Expression()      : {Token identifier, op;}
{/*@bgen(jjtree) SubNFA */
  {
    SimpleNode jjtn001 = new SimpleNode(JJTSUBNFA);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*/
  (   "(" NFASet() ")" (Operator())?   )/*@bgen(jjtree)*/
  } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      throw (RuntimeException)jjte001;
    }
    if (jjte001 instanceof ParseException) {
      throw (ParseException)jjte001;
    }
    throw (Error)jjte001;
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
  }
/*@egen*/        
  |/*@bgen(jjtree) Term */
  {
    SimpleNode jjtn002 = new SimpleNode(JJTTERM);
    boolean jjtc002 = true;
    jjtree.openNodeScope(jjtn002);
  }
  try {
/*@egen*/
  (   (identifier = <IDENTIFIER> | identifier = <DOT> ) { jjtn002.name = identifier.image;} (Operator())?  )/*@bgen(jjtree)*/
  } catch (Throwable jjte002) {
    if (jjtc002) {
      jjtree.clearNodeScope(jjtn002);
      jjtc002 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte002 instanceof RuntimeException) {
      throw (RuntimeException)jjte002;
    }
    if (jjte002 instanceof ParseException) {
      throw (ParseException)jjte002;
    }
    throw (Error)jjte002;
  } finally {
    if (jjtc002) {
      jjtree.closeNodeScope(jjtn002, true);
    }
  }
/*@egen*/      
}

void Operator(): {/*@bgen(jjtree) Operator */
                  SimpleNode jjtn000 = new SimpleNode(JJTOPERATOR);
                  boolean jjtc000 = true;
                  jjtree.openNodeScope(jjtn000);
/*@egen*/Token op;}
{/*@bgen(jjtree) Operator */
  try {
/*@egen*/
  (
    (   op = <OPERATOR>		)
    |
    ( "{" op = < INTERVAL >  "}" )
  )/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/ { jjtn000.name = op.image; }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}